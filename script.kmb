message := 'Hello, World!'    # Define new variable
puts 'Message:' message       # Return 'Hello, World!'
message = 'Bye, bye'          # Edit variable value
puts 'Edited:' message        # Return 'Bye, bye'
message := 'Hello again!'     # Append 'message' in stack
puts 'Appended:' message      # Return 'Hello again!'
puts 'Last removed'
del message                   # Remove last 'message' in stack
puts 'Old value:' message     # Return 'Bye, bye' (previous 'message' in stack)
puts "Sum:" (1 + (2 + 3))     # Math expressions

if true {
    message := 'Local scope'  # Append 'message' only for block scope
    puts 'Local:' message
} message {
    puts 'Else if'
} else {
    puts 'Final else'
}
puts (0 ? 'yes' : { 'no' })
puts 'Global:' message

def say { puts "Function said:" message args }
say { args := "Gogs"; message := 'Something' }
say "Henrique" "Soares"
puts "Global again:" message

count = 0
while {count < 3} {
    count = (count + 1)
    puts 'COUNT:' count
}
puts "END:" count

for {i = 3} {i < 5} {i = (i + 1)} {
    puts 'I:' i
}
