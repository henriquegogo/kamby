#!./kamby

message := 'Hello, World!'    # Define new variable
puts 'Message:' message       # Return 'Hello, World!'
message = 'Bye, bye'          # Edit variable value
puts 'Edited:' message        # Return 'Bye, bye'
message := 'Hello again!'     # Append 'message' in stack
puts 'Appended:' message      # Return 'Hello again!'
puts 'Last removed'
del message                   # Remove last 'message' in stack
puts 'Old value:' message     # Return 'Bye, bye' (previous 'message' in stack)
puts "Sum:" 1 + 2 + 3         # Math expressions

user := "GOGS"
if true {
    message := 'Local scope'  # Append 'message' only for block scope
    puts user
    del user
    puts user 'should be deleted'
    puts 'Local:' message
} message {
    puts 'Else if'
} else {
    puts 'Final else'
}
puts user 'should be deleted'
puts (if false 'yes' else 'no')
puts 'Global:' message

def say { puts "Function said:" surname firstname (.) }
say [firstname := "Henrique"; surname := "Soares"]
say "Gogs"

count = 0
while {count < 3} {
    count += 1
    puts 'COUNT:' count
}
puts "END:" count

for {i := 3} {i < 5} {i += 1} {
    puts 'I:' i
}

list = ['first' 'second' 'third']
puts 'LIST:' list :: {. 2}
list += 'fourth'
puts 'LIST APPENDED:' list :: {. 4}
list += ['five' 'last one']
tree list

test := "Test"
(.) = 'Little thing'
puts 'Last:' (. 1)

l2 = ['shamone' 'two' 'three']
puts l2 :: {. 0}
puts l2 :: {. 1}
puts l2 :: {. 3}
puts l2 :: {. 7}

obj = [name := 'Gogs'; age := 37; children := 3]
obj :: {name = 'Henrique'}
obj :: {children = 4}
obj :: {del children}
tree obj
obj :: {del name}
obj :: {tree}
